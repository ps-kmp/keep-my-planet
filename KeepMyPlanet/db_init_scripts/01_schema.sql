-- Users Table
CREATE TABLE IF NOT EXISTS users (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    profile_picture_id BIGINT,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL
);

-- Photos Table
CREATE TABLE IF NOT EXISTS photos (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    url TEXT NOT NULL,
    uploader_id BIGINT NOT NULL,
    uploaded_at TIMESTAMP NOT NULL,
    CONSTRAINT fk_photo_uploader FOREIGN KEY (uploader_id) REFERENCES users(id) ON DELETE CASCADE
);

ALTER TABLE users
ADD CONSTRAINT fk_user_profile_picture FOREIGN KEY (profile_picture_id) REFERENCES photos(id) ON DELETE SET NULL;


-- Zones Table
CREATE TABLE IF NOT EXISTS zones (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    latitude DOUBLE PRECISION NOT NULL,
    longitude DOUBLE PRECISION NOT NULL,
    description TEXT NOT NULL,
    reporter_id BIGINT NOT NULL,
    event_id BIGINT,
    status TEXT NOT NULL,
    zone_severity TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    CONSTRAINT fk_zone_reporter FOREIGN KEY (reporter_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Events Table
CREATE TABLE IF NOT EXISTS events (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    start_datetime TIMESTAMP NOT NULL,
    end_datetime TIMESTAMP,
    zone_id BIGINT NOT NULL,
    organizer_id BIGINT NOT NULL,
    status TEXT NOT NULL,
    max_participants INTEGER,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    CONSTRAINT fk_event_zone FOREIGN KEY (zone_id) REFERENCES zones(id) ON DELETE CASCADE,
    CONSTRAINT fk_event_organizer FOREIGN KEY (organizer_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT check_event_dates CHECK (end_datetime IS NULL OR end_datetime >= start_datetime)
);

ALTER TABLE zones
ADD CONSTRAINT fk_zone_event FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE SET NULL;


-- Messages Table
CREATE TABLE IF NOT EXISTS messages (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    event_id BIGINT NOT NULL,
    sender_id BIGINT NOT NULL,
    sender_name TEXT NOT NULL,
    content TEXT NOT NULL,
    "timestamp" TIMESTAMP NOT NULL,
    chat_position INTEGER NOT NULL,
    CONSTRAINT fk_message_event FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    CONSTRAINT fk_message_sender FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE (event_id, chat_position)
);

-- Join Table: event_participants
CREATE TABLE IF NOT EXISTS event_participants (
    event_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    PRIMARY KEY (event_id, user_id),
    CONSTRAINT fk_ep_event FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    CONSTRAINT fk_ep_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Join Table: zone_photos
CREATE TABLE IF NOT EXISTS zone_photos (
    zone_id BIGINT NOT NULL,
    photo_id BIGINT NOT NULL,
    PRIMARY KEY (zone_id, photo_id),
    CONSTRAINT fk_zp_zone FOREIGN KEY (zone_id) REFERENCES zones(id) ON DELETE CASCADE,
    CONSTRAINT fk_zp_photo FOREIGN KEY (photo_id) REFERENCES photos(id) ON DELETE CASCADE
);