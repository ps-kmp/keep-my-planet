import kotlinx.datetime.LocalDateTime;
import pt.isel.keepmyplanet.domain.common.Id;
import pt.isel.keepmyplanet.domain.message.MessageContent;
import pt.isel.keepmyplanet.domain.user.Name;

CREATE TABLE messages (
    id BIGINT AS Id PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    event_id BIGINT AS Id NOT NULL,
    sender_id BIGINT AS Id NOT NULL,
    content TEXT AS MessageContent NOT NULL,
    "timestamp" TIMESTAMP AS LocalDateTime NOT NULL,
    chat_position INTEGER NOT NULL,
    UNIQUE(event_id, chat_position)
);

insertAndGetMessage:
INSERT INTO messages(event_id, sender_id, content, "timestamp", chat_position)
VALUES (
    :event_id,
    :sender_id,
    :content,
    :timestamp,
    (SELECT COALESCE(MAX(chat_position), -1) + 1 FROM messages WHERE event_id = :event_id)
)
RETURNING *;

getById:
SELECT m.*, u.name AS sender_name
FROM messages m
JOIN users u ON m.sender_id = u.id
WHERE m.id = :id;

getAllByEventId:
SELECT m.*, u.name AS sender_name
FROM messages m
JOIN users u ON m.sender_id = u.id
WHERE m.event_id = :eventId ORDER BY chat_position;

getAllByEventIdAfterPosition:
SELECT m.*, u.name AS sender_name
FROM messages m
JOIN users u ON m.sender_id = u.id
WHERE m.event_id = :eventId AND m.chat_position > :position ORDER BY chat_position;

getSingleByEventIdAndSeqNum:
SELECT m.*, u.name AS sender_name
FROM messages m
JOIN users u ON m.sender_id = u.id
WHERE m.event_id = :eventId AND m.chat_position = :sequenceNum;

deleteByIdReturningId:
DELETE FROM messages WHERE id = :id RETURNING id;

getAll:
SELECT m.*, u.name AS sender_name
FROM messages m
JOIN users u ON m.sender_id = u.id
ORDER BY event_id, chat_position LIMIT :limit OFFSET :offset ;

updateMessage:
UPDATE messages
SET content = :content,
    "timestamp" = :timestamp
WHERE id = :id
RETURNING *;

getAllBySenderId:
SELECT m.*, u.name AS sender_name
FROM messages m
JOIN users u ON m.sender_id = u.id
WHERE m.sender_id = :senderId ORDER BY event_id, chat_position;

deleteAllByEventIdReturningIds:
DELETE FROM messages WHERE event_id = :eventId RETURNING id;